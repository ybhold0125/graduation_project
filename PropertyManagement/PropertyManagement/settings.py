"""
Django settings for PropertyManagement project.

Generated by 'django-admin startproject' using Django 2.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os
from datetime import timedelta

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'iatbt@btb)pno=4&t=l95)9at@wa6(98y6f+71&qrlkdd6xh83'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'rest_framework',
    'simpleui',
    'nested_admin',

    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'InformationModule',
    'CommunityPersonnel',
    'MainPage',
    'AppletRelated',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'PropertyManagement.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'PropertyManagement.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

 DATABASES = {
         'default': {
         'ENGINE': 'django.db.backends.sqlite3',
         'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
     }
}


# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'zh-hans'

TIME_ZONE = 'Asia/shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = '/static/'

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static')
]

# STATIC_ROOT = os.path.join(BASE_DIR, "static")

# media
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

AUTH_USER_MODEL = 'CommunityPersonnel.User'

#simpleui
SIMPLEUI_STATIC_OFFLINE = True

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ]
}

"""
    '''
    设置True为时，如果提交 TokenRefreshView了刷新令牌，
    则将返回新的刷新令牌以及新的访问令牌。这个新的刷新令牌将通过JSON响应中的“刷新”键提供。
    新的刷新令牌将具有更新的到期时间，
    该时间是通过将REFRESH_TOKEN_LIFETIME 设置中的timedelta添加到请求的当前时间来确定的。
    如果黑名单应用程序正在使用且BLACKLIST_AFTER_ROTATION设置设置为True，
    则提交到刷新视图的刷新令牌将添加到黑名单中。
    '''
    'ROTATE_REFRESH_TOKENS': False,


    '''
    如果黑名单应用程序正在使用且设置设置为True，
    则会将提交的刷新令牌 TokenRefreshView添加到黑名单ROTATE_REFRESH_TOKENS中True。
    '''
    'BLACKLIST_AFTER_ROTATION': True,


    '''
    来自PyJWT库的算法将用于对令牌执行签名/验证操作。
    使用对称的HMAC签名和验证，可以使用以下算法：'HS256'，'HS384'， 'HS512'。
    选择HMAC算法时，该SIGNING_KEY设置将用作签名密钥和验证密钥。
    在这种情况下，该VERIFYING_KEY设置将被忽略。
    使用非对称RSA签名和验证，下面的算法可用于：'RS256'， 'RS384'，'RS512'。
    选择RSA算法时， SIGNING_KEY必须将设置设置为包含RSA私钥的字符串。
    同样，VERIFYING_KEY必须将设置设置为包含RSA公钥的字符串。
    '''
    'ALGORITHM': 'HS256',


    '''
    签名密钥，用于签署生成的令牌的内容。
    对于HMAC签名，这应该是一个随机字符串，其中至少包含签名协议所需的数据位。
    对于RSA签名，这应该是一个包含2048位或更长的RSA私钥的字符串。
    由于Simple JWT默认使用256位HMAC签名，因此 SIGNING_KEY设置默认SECRET_KEY为django项目的设置值。
    虽然这是Simple JWT可以提供的最合理的默认值，但建议开发人员将此设置更改为独立于django项目密钥的值。
    这将使得在受到攻击时更改用于令牌的签名密钥变得更容易
    '''
    'SIGNING_KEY': settings.SECRET_KEY,


    '''
    验证密钥，用于验证生成的令牌的内容。如果ALGORITHM设置指定了HMAC算法，
    VERIFYING_KEY则将忽略该SIGNING_KEY设置并使用该设置的值 。
    如果ALGORITHM设置指定了RSA算法，则VERIFYING_KEY必须将该设置设置为包含RSA公钥的字符串。
    '''
    'VERIFYING_KEY': None,


    '''
    对于需要身份验证的视图，将接受的授权标头类型。
    例如，值'Bearer'表示需要身份验证的视图将查找具有以下格式的标头： Authorization: Bearer <token>。
    此设置还可能包含可能的标头类型的列表或元组（例如('Bearer', 'JWT')）。
    如果以这种方式使用列表或元组，并且身份验证失败，
    则集合中的第一个项将用于在响应中构建“WWW-Authenticate”标头。
    '''
    'AUTH_HEADER_TYPES': ('Bearer',),


    '''
    来自用户模型的数据库字段，该字段将包含在生成的标记中以标识用户。
    建议此设置的值指定一旦选择初始值后通常不会更改的字段。
    例如，指定“用户名”或“电子邮件”字段将是一个糟糕的选择，因为帐户的用户名或电子邮件可能会更改，
    具体取决于给定服务中的帐户管理的设计方式。
    这可以允许使用旧用户名创建新帐户，同时现有令牌仍然有效，其使用该用户名作为用户标识符。
    '''
    'USER_ID_FIELD': 'id',


    '''
    生成的令牌中的声明将用于存储用户标识符。
    例如，设置值'user_id'意味着生成的令牌包括包含用户标识符的“user_id”声明。
    '''
    'USER_ID_CLAIM': 'user_id',


    '''
    指向允许证明身份验证的令牌类型的类的点路径列表。有关此内容的更多信息，请参阅下面的“令牌类型”部分。
    '''
    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),


    '''
    用于存储令牌类型的声明名称。有关此内容的更多信息，请参阅下面的“令牌类型”部分。
    '''
    'TOKEN_TYPE_CLAIM': 'token_type',


    '''
    声明名称，用于存储令牌的唯一标识符。此标识符用于标识黑名单应用中的已撤销令牌。
    在某些情况下，除了默认的“jti”声明之外，可能还需要使用另一个声明来存储这样的值。
    '''
    'JTI_CLAIM': 'jti',


    '''
    一个datetime.timedelta对象，它指定滑动令牌的有效时间以证明身份验证。
    timedelta在令牌生成期间，此值将添加到当前UTC时间，
    以获取令牌的默认“exp”声明值。有关此内容的更多信息，请参阅下面的“滑动令牌”部分。
    '''
    'SLIDING_TOKEN_REFRESH_EXP_CLAIM': 'refresh_exp',


    '''
    一个datetime.timedelta对象，指定滑动令牌有效刷新的时间。
    timedelta在令牌生成期间，此值将添加到当前UTC时间，以获取令牌的默认“exp”声明值。
    有关此内容的更多信息，请参阅下面的“滑动令牌”部分。
    '''
    'SLIDING_TOKEN_LIFETIME': timedelta(minutes=5),


    '''
    声明名称，用于存储滑动令牌刷新周期的exipration时间。
    有关此内容的更多信息，请参阅下面的“滑动令牌”部分。
    '''
    'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=1),
"""

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(days=1),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
    'ROTATE_REFRESH_TOKENS': False,
    'BLACKLIST_AFTER_ROTATION': True,

    'ALGORITHM': 'HS256',
    #'SIGNING_KEY': settings.SECRET_KEY,
    'VERIFYING_KEY': None,

    'AUTH_HEADER_TYPES': ('Token',),
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',

    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',

    'JTI_CLAIM': 'jti',

    'SLIDING_TOKEN_REFRESH_EXP_CLAIM': 'refresh_exp',
    'SLIDING_TOKEN_LIFETIME': timedelta(minutes=5),
    'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=1),
}
